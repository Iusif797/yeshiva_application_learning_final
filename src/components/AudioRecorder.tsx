import { useState, useRef, useEffect } from 'react';
import { Mic, Square, Play, Pause, Waves as Waveform, CheckCircle, Loader, RotateCcw, Download, Volume2 } from 'lucide-react';
import { useTheme } from '../context/ThemeContext';

interface AudioRecorderProps {
  onAudioReady: (audioBlob: Blob, transcription: string) => void;
  className?: string;
}

interface AIAnalysis {
  transcription: string;
  hebrewText: string;
  russianTranslation: string;
  explanation: string;
  errors: string[];
  suggestions: string[];
  quality: 'excellent' | 'good' | 'needs_improvement';
  confidence: number;
  wordCount: number;
  duration: number;
}

export default function AudioRecorder({ onAudioReady, className = '' }: AudioRecorderProps) {
  const { darkMode } = useTheme();
  const [isRecording, setIsRecording] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [duration, setDuration] = useState(0);
  const [isProcessing, setIsProcessing] = useState(false);
  const [aiAnalysis, setAiAnalysis] = useState<AIAnalysis | null>(null);
  const [processingStep, setProcessingStep] = useState('');

  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const chunksRef = useRef<Blob[]>([]);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    return () => {
      if (timerRef.current) clearInterval(timerRef.current);
      if (audioUrl) URL.revokeObjectURL(audioUrl);
    };
  }, [audioUrl]);

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100,
          channelCount: 1
        } 
      });

      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });

      mediaRecorderRef.current = mediaRecorder;
      chunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { type: 'audio/webm' });
        setAudioBlob(blob);
        const url = URL.createObjectURL(blob);
        setAudioUrl(url);
        
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorder.start(1000);
      setIsRecording(true);
      setDuration(0);

      timerRef.current = setInterval(() => {
        setDuration(prev => prev + 1);
      }, 1000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }
  };

  const playAudio = () => {
    if (audioRef.current && audioUrl) {
      if (isPlaying) {
        audioRef.current.pause();
        setIsPlaying(false);
      } else {
        audioRef.current.play();
        setIsPlaying(true);
      }
    }
  };

  const processAudioWithAI = async () => {
    if (!audioBlob) return;

    setIsProcessing(true);
    
    try {
      // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ
      setProcessingStep('–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ...');
      await new Promise(resolve => setTimeout(resolve, 1500));

      // –®–∞–≥ 2: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
      setProcessingStep('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...');
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≤—Ä–∏—Ç–∞
      setProcessingStep('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–µ–≤–Ω–µ–µ–≤—Ä–µ–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...');
      await new Promise(resolve => setTimeout(resolve, 1500));

      // –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
      setProcessingStep('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π...');
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –î–µ–º–æ AI –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const analysis: AIAnalysis = {
        transcription: `◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™ ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•◊É ◊ï÷∞◊î÷∏◊ê÷∏◊®÷∂◊• ◊î÷∏◊ô÷∞◊™÷∏◊î ◊™÷π◊î◊ï÷º ◊ï÷∏◊ë÷π◊î◊ï÷º ◊ï÷∞◊ó÷π◊©÷∂◊Å◊ö÷∞ ◊¢÷∑◊ú÷æ◊§÷∞÷º◊†÷µ◊ô ◊™÷∞◊î◊ï÷π◊ù ◊ï÷∞◊®◊ï÷º◊ó÷∑ ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù ◊û÷∞◊®÷∑◊ó÷∂◊§÷∂◊™ ◊¢÷∑◊ú÷æ◊§÷∞÷º◊†÷µ◊ô ◊î÷∑◊û÷∏÷º◊ô÷¥◊ù◊É

◊ï÷∑◊ô÷π÷º◊ê◊û÷∂◊® ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù ◊ô÷∞◊î÷¥◊ô ◊ê◊ï÷π◊® ◊ï÷∑◊ô÷∞◊î÷¥◊ô÷æ◊ê◊ï÷π◊®◊É ◊ï÷∑◊ô÷∑÷º◊®÷∞◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù ◊ê÷∂◊™÷æ◊î÷∏◊ê◊ï÷π◊® ◊õ÷¥÷º◊ô÷æ◊ò◊ï÷π◊ë ◊ï÷∑◊ô÷∑÷º◊ë÷∞◊ì÷µ÷º◊ú ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù ◊ë÷µ÷º◊ô◊ü ◊î÷∏◊ê◊ï÷π◊® ◊ï÷º◊ë÷µ◊ô◊ü ◊î÷∑◊ó÷π◊©÷∂◊Å◊ö÷∞◊É`,
        
        hebrewText: `◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™ ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•◊É`,
        
        russianTranslation: `–í –Ω–∞—á–∞–ª–µ —Å–æ—Ç–≤–æ—Ä–∏–ª –ë–æ–≥ –Ω–µ–±–æ –∏ –∑–µ–º–ª—é. –ó–µ–º–ª—è –∂–µ –±—ã–ª–∞ –±–µ–∑–≤–∏–¥–Ω–∞ –∏ –ø—É—Å—Ç–∞, –∏ —Ç—å–º–∞ –Ω–∞–¥ –±–µ–∑–¥–Ω–æ—é, –∏ –î—É—Ö –ë–æ–∂–∏–π –Ω–æ—Å–∏–ª—Å—è –Ω–∞–¥ –≤–æ–¥–æ—é.

–ò —Å–∫–∞–∑–∞–ª –ë–æ–≥: –¥–∞ –±—É–¥–µ—Ç —Å–≤–µ—Ç. –ò —Å—Ç–∞–ª —Å–≤–µ—Ç. –ò —É–≤–∏–¥–µ–ª –ë–æ–≥ —Å–≤–µ—Ç, —á—Ç–æ –æ–Ω —Ö–æ—Ä–æ—à, –∏ –æ—Ç–¥–µ–ª–∏–ª –ë–æ–≥ —Å–≤–µ—Ç –æ—Ç —Ç—å–º—ã.`,
        
        explanation: `–≠—Ç–æ—Ç –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤—ã –∫–Ω–∏–≥–∏ –ë—ã—Ç–∏—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ç–≤–æ—Ä–µ–Ω–∏—è –º–∏—Ä–∞. 

üîπ **◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™** (–±–µ—Ä–µ—à–∏—Ç) - "–≤ –Ω–∞—á–∞–ª–µ" - –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¢–æ—Ä—ã, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.

üîπ **◊ë÷∏÷º◊®÷∏◊ê** (–±–∞—Ä–∞) - "—Å–æ—Ç–≤–æ—Ä–∏–ª" - –æ—Å–æ–±—ã–π –≥–ª–∞–≥–æ–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–≤–æ—Ä–µ–Ω–∏—è –∏–∑ –Ω–∏—á–µ–≥–æ.

üîπ **◊ê÷±◊ú÷π◊î÷¥◊ô◊ù** (–≠–ª–æ—Ö–∏–º) - –∏–º—è –í—Å–µ–≤—ã—à–Ω–µ–≥–æ, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—â–µ–µ –ï–≥–æ –º–æ–≥—É—â–µ—Å—Ç–≤–æ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å.`,
        
        errors: [],
        
        suggestions: [
          '–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –¥—Ä–µ–≤–Ω–µ–µ–≤—Ä–µ–π—Å–∫–∏—Ö —Å–ª–æ–≤',
          '–•–æ—Ä–æ—à–∞—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è –∏ —Ä–∏—Ç–º —á—Ç–µ–Ω–∏—è',
          '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å—Ç–∏—Ö–∞–º–∏',
          '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'
        ],
        
        quality: 'excellent',
        confidence: 96,
        wordCount: 24,
        duration: Math.round(duration)
      };

      setAiAnalysis(analysis);
      onAudioReady(audioBlob, analysis.transcription);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      setAiAnalysis({
        transcription: '',
        hebrewText: '',
        russianTranslation: '',
        explanation: '',
        errors: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ'],
        suggestions: [],
        quality: 'needs_improvement',
        confidence: 0,
        wordCount: 0,
        duration: 0
      });
    } finally {
      setIsProcessing(false);
      setProcessingStep('');
    }
  };

  const downloadAudio = () => {
    if (audioBlob) {
      const url = URL.createObjectURL(audioBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `lesson-audio-${new Date().toISOString().split('T')[0]}.webm`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const resetRecording = () => {
    setAudioBlob(null);
    if (audioUrl) {
      URL.revokeObjectURL(audioUrl);
      setAudioUrl(null);
    }
    setDuration(0);
    setAiAnalysis(null);
    setIsPlaying(false);
    setProcessingStep('');
  };

  const getQualityColor = (quality: string) => {
    switch (quality) {
      case 'excellent': return 'from-green-500 to-green-600';
      case 'good': return 'from-yellow-500 to-yellow-600';
      default: return 'from-red-500 to-red-600';
    }
  };

  const getQualityText = (quality: string) => {
    switch (quality) {
      case 'excellent': return '–û—Ç–ª–∏—á–Ω–æ';
      case 'good': return '–•–æ—Ä–æ—à–æ';
      default: return '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
    }
  };

  return (
    <div className={`${darkMode ? 'bg-gradient-to-br from-slate-800 to-slate-900 border-slate-600' : 'bg-gradient-to-br from-white to-blue-50 border-gray-200'} rounded-3xl p-8 border shadow-2xl ${className}`}>
      <div className="flex items-center mb-8">
        <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-red-600 rounded-2xl flex items-center justify-center mr-6 shadow-lg">
          <Mic size={32} className="text-white" />
        </div>
        <div>
          <h3 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'} mb-2`}>
            –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Ä–æ–∫–∞
          </h3>
          <p className={`${darkMode ? 'text-slate-400' : 'text-gray-600'}`}>
            –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —É—Ä–æ–∫ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
          </p>
        </div>
      </div>

      {/* Recording Interface */}
      <div className="space-y-8">
        {!audioBlob ? (
          <div className="text-center">
            <div className={`w-40 h-40 mx-auto rounded-full border-4 flex items-center justify-center mb-8 transition-all duration-300 ${
              isRecording 
                ? 'border-red-500 bg-red-500/10 animate-pulse shadow-2xl shadow-red-500/25' 
                : darkMode 
                  ? 'border-slate-600 hover:border-red-500 hover:shadow-xl' 
                  : 'border-gray-300 hover:border-red-500 hover:shadow-xl'
            }`}>
              <button
                onClick={isRecording ? stopRecording : startRecording}
                className={`w-28 h-28 rounded-full flex items-center justify-center transition-all duration-200 ${
                  isRecording
                    ? 'bg-red-600 hover:bg-red-700'
                    : 'bg-gradient-to-br from-red-500 to-red-600 hover:from-red-600 hover:to-red-700'
                } shadow-2xl hover:shadow-red-500/30 transform hover:scale-105`}
              >
                {isRecording ? (
                  <Square size={40} className="text-white" />
                ) : (
                  <Mic size={40} className="text-white" />
                )}
              </button>
            </div>

            <div className={`text-4xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              {formatTime(duration)}
            </div>
            
            <p className={`text-lg ${darkMode ? 'text-slate-400' : 'text-gray-600'}`}>
              {isRecording ? (
                <span className="flex items-center justify-center">
                  <div className="w-3 h-3 bg-red-500 rounded-full mr-3 animate-pulse"></div>
                  –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å —É—Ä–æ–∫–∞...
                </span>
              ) : (
                '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ —É—Ä–æ–∫–∞'
              )}
            </p>

            {isRecording && (
              <div className="mt-6">
                <div className={`w-full max-w-md mx-auto h-2 ${darkMode ? 'bg-slate-700' : 'bg-gray-300'} rounded-full overflow-hidden`}>
                  <div className="h-full bg-gradient-to-r from-red-500 to-red-600 rounded-full animate-pulse"></div>
                </div>
              </div>
            )}
          </div>
        ) : (
          <div className="space-y-6">
            {/* Audio Player */}
            <div className={`${darkMode ? 'bg-slate-700/50 border-slate-600' : 'bg-white border-gray-200'} rounded-2xl p-6 border shadow-lg`}>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center">
                  <Volume2 size={24} className={`mr-3 ${darkMode ? 'text-slate-400' : 'text-gray-600'}`} />
                  <span className={`font-bold text-lg ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–π —É—Ä–æ–∫
                  </span>
                </div>
                <div className="flex items-center space-x-3">
                  <span className={`text-sm ${darkMode ? 'text-slate-400' : 'text-gray-600'}`}>
                    {formatTime(duration)}
                  </span>
                  <button
                    onClick={downloadAudio}
                    className={`p-2 rounded-xl transition-colors ${
                      darkMode ? 'hover:bg-slate-600 text-slate-400' : 'hover:bg-gray-100 text-gray-600'
                    }`}
                    title="–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ"
                  >
                    <Download size={18} />
                  </button>
                </div>
              </div>

              <div className="flex items-center space-x-4">
                <button
                  onClick={playAudio}
                  className="w-14 h-14 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-lg hover:shadow-blue-500/25 transform hover:scale-105"
                >
                  {isPlaying ? <Pause size={24} /> : <Play size={24} className="ml-1" />}
                </button>

                <div className="flex-1">
                  <div className={`w-full h-3 ${darkMode ? 'bg-slate-600' : 'bg-gray-300'} rounded-full overflow-hidden`}>
                    <div className="h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full animate-pulse"></div>
                  </div>
                </div>

                <button
                  onClick={resetRecording}
                  className={`flex items-center px-4 py-2 rounded-xl font-medium transition-colors ${
                    darkMode 
                      ? 'bg-slate-600 hover:bg-slate-500 text-white' 
                      : 'bg-gray-200 hover:bg-gray-300 text-gray-800'
                  }`}
                >
                  <RotateCcw size={16} className="mr-2" />
                  –ó–∞–Ω–æ–≤–æ
                </button>
              </div>

              <audio
                ref={audioRef}
                src={audioUrl || undefined}
                onEnded={() => setIsPlaying(false)}
              />
            </div>

            {/* AI Processing Button */}
            <div className="text-center">
              <button
                onClick={processAudioWithAI}
                disabled={isProcessing}
                className={`flex items-center justify-center mx-auto px-8 py-4 rounded-2xl font-bold text-white transition-all duration-200 shadow-2xl ${
                  isProcessing
                    ? 'bg-gray-500 cursor-not-allowed'
                    : 'bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 hover:shadow-purple-500/30 transform hover:scale-105'
                }`}
              >
                {isProcessing ? (
                  <>
                    <Loader size={24} className="mr-3 animate-spin" />
                    <div className="text-left">
                      <div>AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ...</div>
                      {processingStep && (
                        <div className="text-sm opacity-75 mt-1">{processingStep}</div>
                      )}
                    </div>
                  </>
                ) : (
                  <>
                    <Waveform size={24} className="mr-3" />
                    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–º–æ—â—å—é AI
                  </>
                )}
              </button>
            </div>

            {/* AI Analysis Results */}
            {aiAnalysis && (
              <div className="space-y-6">
                {/* Quality Assessment */}
                <div className={`${darkMode ? 'bg-slate-700/50 border-slate-600' : 'bg-white border-gray-200'} rounded-2xl p-6 border shadow-lg`}>
                  <div className="flex items-center justify-between mb-6">
                    <h4 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                      AI –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
                    </h4>
                    <div className={`px-4 py-2 rounded-full bg-gradient-to-r ${getQualityColor(aiAnalysis.quality)} text-white font-bold`}>
                      {getQualityText(aiAnalysis.quality)}
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-4 mb-6">
                    <div className="text-center">
                      <div className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                        {aiAnalysis.confidence}%
                      </div>
                      <div className={`text-sm ${darkMode ? 'text-slate-400' : 'text-gray-600'}`}>
                        –¢–æ—á–Ω–æ—Å—Ç—å
                      </div>
                    </div>
                    <div className="text-center">
                      <div className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                        {aiAnalysis.wordCount}
                      </div>
                      <div className={`text-sm ${darkMode ? 'text-slate-400' : 'text-gray-600'}`}>
                        –°–ª–æ–≤
                      </div>
                    </div>
                    <div className="text-center">
                      <div className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                        {formatTime(aiAnalysis.duration)}
                      </div>
                      <div className={`text-sm ${darkMode ? 'text-slate-400' : 'text-gray-600'}`}>
                        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                      </div>
                    </div>
                  </div>

                  {aiAnalysis.suggestions.length > 0 && (
                    <div>
                      <h5 className={`font-bold mb-3 ${darkMode ? 'text-slate-300' : 'text-gray-700'}`}>
                        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI:
                      </h5>
                      <div className="space-y-2">
                        {aiAnalysis.suggestions.map((suggestion, index) => (
                          <div key={index} className={`flex items-start p-3 rounded-xl ${darkMode ? 'bg-green-900/20' : 'bg-green-50'}`}>
                            <CheckCircle size={16} className="text-green-500 mr-3 mt-0.5 flex-shrink-0" />
                            <span className={`text-sm ${darkMode ? 'text-slate-300' : 'text-gray-700'}`}>
                              {suggestion}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Hebrew Text */}
                <div className={`${darkMode ? 'bg-slate-700/50 border-slate-600' : 'bg-white border-gray-200'} rounded-2xl p-6 border shadow-lg`}>
                  <h4 className={`text-xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏–≤—Ä–∏—Ç–µ
                  </h4>
                  <div className={`text-lg leading-relaxed p-4 rounded-xl ${darkMode ? 'bg-slate-800/50' : 'bg-blue-50'}`} style={{ direction: 'rtl' }}>
                    <pre className="whitespace-pre-wrap font-sans hebrew-text">{aiAnalysis.hebrewText}</pre>
                  </div>
                </div>

                {/* Russian Translation */}
                <div className={`${darkMode ? 'bg-slate-700/50 border-slate-600' : 'bg-white border-gray-200'} rounded-2xl p-6 border shadow-lg`}>
                  <h4 className={`text-xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                  </h4>
                  <div className={`text-base leading-relaxed p-4 rounded-xl ${darkMode ? 'bg-slate-800/50' : 'bg-blue-50'}`}>
                    <pre className="whitespace-pre-wrap font-sans">{aiAnalysis.russianTranslation}</pre>
                  </div>
                </div>

                {/* Explanation */}
                <div className={`${darkMode ? 'bg-slate-700/50 border-slate-600' : 'bg-white border-gray-200'} rounded-2xl p-6 border shadow-lg`}>
                  <h4 className={`text-xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                  </h4>
                  <div className={`text-base leading-relaxed p-4 rounded-xl ${darkMode ? 'bg-slate-800/50' : 'bg-blue-50'}`}>
                    <pre className="whitespace-pre-wrap font-sans">{aiAnalysis.explanation}</pre>
                  </div>
                </div>

                {/* Full Transcription */}
                <div className={`${darkMode ? 'bg-slate-700/50 border-slate-600' : 'bg-white border-gray-200'} rounded-2xl p-6 border shadow-lg`}>
                  <h4 className={`text-xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è —É—Ä–æ–∫–∞
                  </h4>
                  <div className={`text-sm leading-relaxed p-4 rounded-xl ${darkMode ? 'bg-slate-800/50' : 'bg-blue-50'} max-h-60 overflow-y-auto`}>
                    <pre className="whitespace-pre-wrap font-sans">{aiAnalysis.transcription}</pre>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}